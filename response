{activeOutputTab === "functional-tests" ? (
  <div
    className="bg-white rounded-3 border border-dark shadow overflow-hidden"
    style={{ height: "500px" }}
  >
    <div className="d-flex align-items-center bg-light px-4 py-2 border-bottom">
      <span className="text-dark fw-medium">
        Functional Test Cases
        {Array.isArray(functionalTests) && functionalTests.length > 0
          ? ` (${functionalTests.length} tests)`
          : ""}
      </span>
    </div>
    <div
      className="p-4 overflow-auto"
      style={{ height: "calc(100% - 43px)" }}
      onDoubleClick={handleDoubleClick}
      ref={functionalTestsContentRef}
    >
      <div className="text-dark fs-6 w-100">
        {Array.isArray(functionalTests) && functionalTests.length > 0 ? (
          <div>
            {/* Optional: Display testStrategy and domainCoverage */}
            {functionalTests.testStrategy && (
              <div className="mb-4">
                <h4 className="fs-4 fw-semibold text-dark mb-2">Test Strategy</h4>
                <p className="mb-2">{functionalTests.testStrategy}</p>
              </div>
            )}
            {Array.isArray(functionalTests.domainCoverage) &&
              functionalTests.domainCoverage.length > 0 && (
                <div className="mb-4">
                  <h4 className="fs-4 fw-semibold text-dark mb-2">Domain Coverage</h4>
                  <ul className="list-disc pl-5">
                    {functionalTests.domainCoverage.map((item, index) => (
                      <li key={index} className="mb-1">{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            {/* Test Cases */}
            <h4 className="fs-4 fw-semibold text-dark mb-3">Test Cases</h4>
            {functionalTests.map((test, index) => (
              <div
                key={test.id || index}
                className="mb-3 p-3 border rounded bg-light"
              >
                <div className="d-flex justify-content-between">
                  <h5 className="fw-bold text-primary mb-2">
                    Test ID: {test.id}
                  </h5>
                  <span
                    className={`badge ${
                      test.priority === "High"
                        ? "bg-danger"
                        : test.priority === "Medium"
                        ? "bg-warning"
                        : "bg-secondary"
                    }`}
                  >
                    {test.priority || "N/A"}
                  </span>
                </div>
                <p className="mb-2">
                  <strong>Description:</strong> {test.description}
                </p>
                <p className="mb-2">
                  <strong>Preconditions:</strong> {test.preconditions || "None"}
                </p>
                <p className="mb-0">
                  <strong>Expected Result:</strong> {test.expectedResult}
                </p>
              </div>
            ))}
          </div>
        ) : typeof functionalTests === "string" ? (
          functionalTests.split("\n").map((line, index) => {
            if (line.trim().startsWith("# ")) {
              return (
                <h1
                  key={index}
                  className="fs-2 fw-bold text-dark mt-4 mb-2 border-bottom pb-1"
                  style={{ borderColor: "#0d9488" }}
                >
                  {line.replace("# ", "")}
                </h1>
              );
            }
            if (line.trim().startsWith("## ")) {
              return (
                <h4
                  key={index}
                  className="fs-4 fw-semibold text-dark mt-3 mb-2"
                >
                  {line.replace("## ", "")}
                </h4>
              );
            }
            return <div key={index} className="mb-1">{line || <br />}</div>;
          })
        ) : (
          <div className="text-center mt-5 text-secondary">
            <FileSearch size={48} className="mb-3 opacity-50 mx-auto" />
            <p>No functional tests available yet.</p>
          </div>
        )}
      </div>
    </div>
  </div>
) : /* ... other tabs */}
